// Code generated by MockGen. DO NOT EDIT.
// Source: mint_information.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "tgbot/internal/logic/modules/mint_information/models"
	models_types "tgbot/internal/models/models_types"

	gomock "github.com/golang/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParser) Parse(b []byte) (models.TitleParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", b)
	ret0, _ := ret[0].(models.TitleParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), b)
}

// MockWebClient is a mock of WebClient interface.
type MockWebClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebClientMockRecorder
}

// MockWebClientMockRecorder is the mock recorder for MockWebClient.
type MockWebClientMockRecorder struct {
	mock *MockWebClient
}

// NewMockWebClient creates a new mock instance.
func NewMockWebClient(ctrl *gomock.Controller) *MockWebClient {
	mock := &MockWebClient{ctrl: ctrl}
	mock.recorder = &MockWebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebClient) EXPECT() *MockWebClientMockRecorder {
	return m.recorder
}

// DoGetRequest mocks base method.
func (m *MockWebClient) DoGetRequest(url models_types.URL) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetRequest", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetRequest indicates an expected call of DoGetRequest.
func (mr *MockWebClientMockRecorder) DoGetRequest(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetRequest", reflect.TypeOf((*MockWebClient)(nil).DoGetRequest), url)
}
